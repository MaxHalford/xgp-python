# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci_scripts\\appveyor\\run_with_env.cmd"
    MODULE: xgp
    PROJECT_NAME: xgp
    GOPATH: c:\gopath
    GOVERSION: 1.10

  matrix:

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.0"
      PYTHON_ARCH: "32"
      MINICONDA: "C:\\Miniconda35"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.0"
      PYTHON_ARCH: "64"
      MINICONDA: "C:\\Miniconda35-x64"

install:
  # Install Go
  - "rmdir C:\\go /s /q"
  - "appveyor DownloadFile https://storage.googleapis.com/golang/go%GOVERSION%.windows-amd64.msi"
  - "msiexec /i go%GOVERSION%.windows-amd64.msi /q"
  - "choco install bzr"
  - "SET PATH=C:\\go\\bin;%GOPATH%\\bin;C:\\Program Files (x86)\\Bazaar\\;C:\\Program File\\s\\Mercurial\\%PATH%"
  - "go version"
  - "go env"

  # Set GCC path
  - "SET PATH=C:\\cygwin64\\bin;%PATH%"

  # Miniconda is pre-installed in the worker build
  - "SET PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - "python -m pip install -U pip"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"

  # Remove cygwin because it clashes with conda
  # see http://help.appveyor.com/discussions/problems/3712-git-remote-https-seems-to-be-broken
  - rmdir C:\\cygwin /s /q

  # Install the build and runtime dependencies of the project.
  - conda install --quiet --yes numpy scipy cython nose scikit-learn wheel
  - pip install wheelhouse_uploader nose-timer
  - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"

  # Install the generated wheel package to test it
  - "pip install --pre --no-index --find-links dist %PROJECT_NAME%"


# Not a .NET project, we build scikit-learn in the install step instead
build: false


artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*


deploy:
  provider: GitHub
  auth_token:
    secure: JIVgocIa2zwFRn6rRqAH9q/NSs6zPrYkF7z//ygUoCxRZdkdX/7O8gl/2AWG7P90
  artifact: dist\*
  draft: false
  prerelease: false
  on:
    appveyor_repo_tag: true


test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - "mkdir empty_folder"
  - "cd empty_folder"

  - "python -c \"import nose; nose.main()\" --with-timer --timer-top-n 20 -s -v %MODULE%"

  # Move back to the project folder
  - "cd .."


cache:
  # Use the appveyor cache to avoid re-downloading large archives such
  # the MKL numpy and scipy wheels mirrored on a rackspace cloud
  # container, speed up the appveyor jobs and reduce bandwidth
  # usage on our rackspace account.
  - '%APPDATA%\pip\Cache'
